// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"collectionview-service/internal/biz"
	"collectionview-service/internal/cache"
	"collectionview-service/internal/conf"
	"collectionview-service/internal/mongo"
	"collectionview-service/internal/server"
	"collectionview-service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, logger log.Logger, redis *conf.Redis) (*kratos.App, func(), error) {
	helper := mongo.NewLogger()
	mongoData, err := mongo.NewData(data, helper)
	if err != nil {
		return nil, nil, err
	}
	mongoCollectionInterface := mongo.NewMongoCollectionImpl(mongoData, helper)
	collectionBizHandler := biz.NewCollectionBizHandler(mongoCollectionInterface, logger)
	redisStore := cache.NewRedisStore(redis)
	cacheRepository := cache.NewCacheImpl(redisStore)
	contentViewService := service.NewContentViewService(collectionBizHandler, mongoCollectionInterface, cacheRepository)
	grpcServer := server.NewGRPCServer(confServer, contentViewService, logger)
	httpServer := server.NewHTTPServer(confServer, contentViewService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
	}, nil
}
